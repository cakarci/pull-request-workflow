name: 'build-test-release'

on:
  pull_request:
  push:
    branches:
      - master
    tags-ignore:
      - '**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Use Yarn cache
        uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile
      - run: |
          yarn all

  release:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: ${{ github.ref == 'refs/heads/master' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: |
          npx semantic-release
        if: ${{ github.ref == 'refs/heads/master' }}

  update-major-tag:
    needs: [release]
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Update major release tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const tagName = latestRelease?.data?.tag_name
            if (!tagName) {
              return
            }
            const [majorVersion] = tagName.split('.')
            const ref = `refs/tags/${majorVersion}`
            console.log(`TagName: ${tagName}, MajorVersion: ${majorVersion}`)
            const refParams = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref,
              sha: context.sha
            }
            try {
              await github.rest.git.updateRef({
                ...refParams,
                ref: `tags/${majorVersion}`,
                force: true
              })
              console.log(`${ref} is updated with hash: ${context.sha}`)
            } catch (_e) {
              console.log(`${ref} does not exist & creating it with hash: ${context.sha}`)
              console.log('------')
              await github.rest.git.createRef(refParams)
              console.log(`${ref} is created with hash: ${context.sha}`)
            }
